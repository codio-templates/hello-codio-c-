[
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2650837085",
  "source": {
   "name": "Demo Question",
   "showName": false,
   "instructions": "## Reading Question\nRearrange the code blocks below to create a loop that iterates over a list and prints each element of the list. **Note**, some of the code blocks will not be used.",
   "initial": "char animals[4] = {\"cat\", \"dog\", \"fish\", \"rabbit\"};\nfor (int i = 0; i < 4; ++i) {\n  cout << animals[i] << \\n\n}\nfor (int i = 0, i < 4, ++i) { #distractor\nfor (++i; int i  0; i < 4) {#distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The first line needs to be the array declaration. You cannot iterate over an array that does not exist. There are three possible choices for the loop. C++ uses the `;` to separate the three parts of a for loop, so the answer with a `,` is incorrect. When using for loops, declare the iterator variable first, then create the test condition, and finally increment the iterator variable. Don't forget to indent the `cout` statement and add the `}` to terminate the loop.\n\n```python\nchar animals[4] = {\"cat\", \"dog\", \"fish\", \"rabbit\"};\nfor (int i = 0; i < 4; ++i) {\n  cout << animals[i] << \\n\n}\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "cpp_demo.cpp",
     "python_demo.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "cpp_demo.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1981899322",
  "source": {
   "name": "Practice MCQ",
   "showName": false,
   "instructions": "## Multiple Choice Question\nWho is the creator of C++?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "448c7d4d-72d0-9b3e-3589-670669d72e51",
     "correct": false,
     "answer": "Guido van Rossum"
    },
    {
     "_id": "d84086ba-a7d2-a56f-5797-d25d50b7c06f",
     "correct": true,
     "answer": "Bjarne Stroustrup"
    },
    {
     "_id": "7a53cab5-f47f-40cb-d68d-86470ef77d54",
     "correct": false,
     "answer": "Brendan Eich"
    },
    {
     "_id": "f0022a14-96e7-ace0-c96e-7ab7c6ef82f2",
     "correct": false,
     "answer": "Larry Wall"
    }
   ],
   "guidance": "Bjarne Stroustrup is the creator of C++. Stroustrup began work on a successor to the C language in 1982 as a member of Bell Labs. The first version of C++ was released in 1985.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2837664483",
  "source": {
   "name": "Fill in the Blank Demo Question",
   "showName": false,
   "instructions": "## Fill in the Blank\nFill in the blanks below.",
   "text": "True or False: Python is a compiled language. <<<False>>>\nTrue or False: You do not use semi-colons at the end of each line of code in Python. <<<True>>>",
   "guidance": "Python is an interpreted language.\nPython does not use semi-colons. Instead it uses whitespace.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "False",
     "True"
    ],
    "text": [
     "True or False: Python is a compiled language. ",
     0,
     "\nTrue or False: You do not use semi-colons at the end of each line of code in Python. ",
     0
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-21366716",
  "source": {
   "name": "Parsons Problem",
   "showName": false,
   "instructions": "## Parson's Problem\nRearrange the code blocks below into the proper order. **Note**, not all of the code blocks will be used.",
   "initial": "The first code block\nThe second code block\nThe third code block\nI am not correct #distractor\nI am not correct #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The first code block\nThe second code block\nThe third code block",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2673740583",
  "source": {
   "name": "standard code test demo",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python3 code/code_test.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem:\n\n```python\nnum = input()\ntry:\n  num = int(num)\n  print(num * 3)\nexcept ValueError:\n  print(\"Please enter an integer\")\n```\n\nRemember, do not have a string with the `input` command. This solution uses the `try/except` block to see if the user input can be typecast into an int. If yes, the program prints the user input multiplied by 3. If the typecast cannot be done, then the message `Please enter an integer` is printed.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "3",
     "output": "9",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "-5",
     "output": "-15",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "abc",
     "output": "Please enter an integer",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/code_test.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/code_test.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3274365764",
  "source": {
   "name": "standard code test example cpp",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "code/code_test",
   "preExecuteCommand": "g++ -o code/code_test code/code_test.cpp",
   "guidance": "Here is one possible solution:\n\n```cpp\n#include <iostream> \nusing namespace std; \n\nint main(int argc, char **argv) \n{ \n  int num = stoi(argv[1]); // typecast the string to an int\n  cout << num * 3;         // print the int multiplied by 3\n\n  return 0; \n} \n```\n\nHere are a couple of things to keep in mind:\n* `char **argv` is a vector of all of the arguments for your program. These arguments are strings.\n* `stoi` allows you to typecast strings to integers.\n* The first element of argument vector (`argv[0]`) is always the program name. So the number passed to your program will be `argv[1]`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "9",
     "input": "",
     "output": "27",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-10",
     "input": "",
     "output": "-30",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12",
     "input": "",
     "output": "36",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/code_test.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/code_test.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]